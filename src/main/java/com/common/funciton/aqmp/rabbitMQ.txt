rabbitMQ
RabbitMq消息模式的核心思想是：一个生产者并不会直接往一个队列中发送消息，事实上，生产者根本不知道它发送的消息将被转发到哪些队列，
实际上，生产者只能把消息发送给一个exchange，exchange只做一件简单的事情：一方面它们接收从生产者发送过来的消息，另一方面，它们把接收到的消息推送给队列。一个exchage必须清楚地知道如何处理一条消息
1.springboot集成
1.1依赖
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-amqp</artifactId>
</dependency>
1.2连接发送
    1.2.1 声明式
    @Bean(value = "connectionFactory")
        public ConnectionFactory connectionFactory(){
            CachingConnectionFactory factory = new CachingConnectionFactory();
            factory.setAddresses(RABBIT_MQ_ADDRESS);
            factory.setUsername(USER_NAME);
            factory.setPassword(PASSWORD);
            factory.setVirtualHost(VIRTUAL_HOST);
            factory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);//确认回调
            factory.setPublisherReturns(true);
            return factory;
        }

        @Bean("rabbitTemplate")
        public RabbitTemplate rabbitTemplate(@Qualifier("connectionFactory") ConnectionFactory connectionFactory) throws IOException, TimeoutException {
            RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
            //使用单独的发送连接，避免生产者由于各种原因阻塞而导致消费者同样阻塞
            rabbitTemplate.setUsePublisherConnection(true);
            //实现消息发送到RabbitMQ交换器的回调确认，到达交换器ack=true否则ack=false
            rabbitTemplate.setConfirmCallback(new RabbitTemplateConfirmAndReturn());
            //当mandatory标志位设置为true时，如果exchange路由不到queue存储消息，那么broker会调用basic.return方法将消息返还给生产者
            //当mandatory设置为false时，出现上述情况broker会直接将消息丢弃
            rabbitTemplate.setMandatory(true);
            //实现消息发送到queue的回调确认，成功发送不回调，发送失败回调（mandatory=true）
            rabbitTemplate.setReturnCallback(new RabbitTemplateConfirmAndReturn());
            return rabbitTemplate;
        }

        @Bean("rabbitAdmin")
        public RabbitAdmin rabbitAdmin(@Qualifier("connectionFactory") ConnectionFactory connectionFactory){
            RabbitAdmin rabbitAdmin = new RabbitAdmin(connectionFactory);
            return rabbitAdmin;
        }
    1.2.2编程式
        CachingConnectionFactory factory = new CachingConnectionFactory();
        factory.setAddresses(RABBIT_MQ_ADDRESS);
        factory.setUsername(USER_NAME);
        factory.setPassword(PASSWORD);
        factory.setVirtualHost(VIRTUAL_HOST);
        factory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);//确认回调
        factory.setPublisherReturns(true);
        Channel channel = factory.createConnection().createChannel(false);//通道是否支持事务
        //队列名称， 是否持久化， 是否排外， 是否自动删除， 队列属性
        channel.queueDeclare("test", false, false, false, null);
        //交换机名称（默认）， 路由key（队列名），消息属性，消息
        channel.basicPublish("","test",null,"你好".getBytes());

1.3连接接收
    1.3.1声明式
    /**
     * 监听simpleQueue
     * @param msg 接收的消息
     */
    @RabbitHandler
    @RabbitListener(queues = "simpleQueue")
    public void linstenerSimpleQueue(String msg){
        System.out.println("revice: "+msg);
    }

    1.3.2编程式
    CachingConnectionFactory factory = new CachingConnectionFactory();
    factory.setAddresses(RABBIT_MQ_ADDRESS);
    factory.setUsername(USER_NAME);
    factory.setPassword(PASSWORD);
    factory.setVirtualHost(VIRTUAL_HOST);
    factory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);//确认回调
    factory.setPublisherReturns(true);
    Channel channel = factory.createConnection().createChannel(false);//通道是否支持事务
    //队列名称， 是否持久化， 是否排外， 是否自动删除， 队列属性
    channel.queueDeclare("test", false, false, false, null);
    //4、定义队列的消费者
    QueueingConsumer queueingConsumer = new QueueingConsumer(channel);
    //true:表示自动确认，只要消息从队列中获取，无论消费者获取到消息后是否成功消费，都会认为消息已经成功消费
    //false:表示手动确认，消费者获取消息后，服务器会将该消息标记为不可用状态，等待消费者的反馈
    //如果消费者一直没有反馈，那么该消息将一直处于不可用状态，并且服务器会认为该消费者已经挂掉，不会再给其
    //发送消息，直到该消费者反馈
    channel.basicConsume("test",false,queueingConsumer);
    //6、获取消息
    while (true){
        QueueingConsumer.Delivery delivery = queueingConsumer.nextDelivery();
        String message = new String(delivery.getBody());
        System.out.println(" [x] Received '" + message + "'");
    }
    //true 批量确认消息
    channel.basicAck(tag, true);
2.队列模式
2.1简单模式：单发送，单接收
2.2work模式：单发送，多接收；
    a、消息队列durable——true持久化
    b、在消费的时候，由channel.basicAck(tag, boolean)在消息处理完成后发送消息false确认单条或true批量确认。
    c、使用了channel.basicQos(1)保证在接收端一个消息没有处理完时不会接收另一个消息，即接收端发送了ack后才会接收下一个消息。在这种情况下发送端会尝试把消息发送给下一个空闲的的接收端
2.3Publish/Subscribe: 一个生产者，多个消费者
